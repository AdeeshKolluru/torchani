.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_energy_force.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_energy_force.py:


Computing Energy and Force Using Builtin Models
===============================================

TorchANI has a model ensemble trained by NeuroChem on the `ANI-1x dataset`_.
These models are shipped with TorchANI and can be used directly.

.. _ANI-1x dataset:
  https://aip.scitation.org/doi/abs/10.1063/1.5023802


To begin with, let's first import the modules we will use:



.. code-block:: python

    import torch
    import torchani







Let's now manually specify the device we want TorchANI to run:



.. code-block:: python

    device = torch.device('cpu')







Let's now load the built-in models and create a pipeline of AEV computer,
neural networks, and energy shifter. This pipeline will first compute AEV,
then use all models in the ensemble to compute molecular energies, and take
the average of these energies to obtain a final output. The reason we need an
energy shifter in the end is that the output of these networks is not the
total energy but the total energy subtracted by a self energy for each atom.



.. code-block:: python

    builtin = torchani.neurochem.Builtins()
    model = torch.nn.Sequential(
      builtin.aev_computer,
      builtin.models,
      builtin.energy_shifter
    )







Now let's define the coordinate and species. If you just want to compute the
energy and force for a single structure like in this example, you need to
make the coordinate tensor has shape ``(1, Na, 3)`` and species has shape
``(1, Na)``, where ``Na`` is the number of atoms in the molecule, the
preceding ``1`` in the shape is here to support batch processing like in
training. If you have ``N`` different structures to compute, then make it
``N``.



.. code-block:: python

    coordinates = torch.tensor([[[0.03192167,  0.00638559,  0.01301679],
                                 [-0.83140486,  0.39370209, -0.26395324],
                                 [-0.66518241, -0.84461308,  0.20759389],
                                 [0.45554739,   0.54289633,  0.81170881],
                                 [0.66091919,  -0.16799635, -0.91037834]]],
                               requires_grad=True, device=device)
    species = builtin.consts.species_to_tensor('CHHHH').to(device).unsqueeze(0)







Now let's compute energy and force:



.. code-block:: python

    _, energy = model((species, coordinates))
    derivative = torch.autograd.grad(energy.sum(), coordinates)[0]
    force = -derivative







And print to see the result:



.. code-block:: python

    print('Energy:', energy.item())
    print('Force:', force.squeeze())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy: -40.459022521972656
    Force: tensor([[ 0.0306, -0.1316, -0.0527],
            [-0.1293,  0.1639, -0.0774],
            [ 0.0856, -0.0429,  0.0408],
            [ 0.0268,  0.0060,  0.0381],
            [-0.0138,  0.0046,  0.0511]])


**Total running time of the script:** ( 0 minutes  1.974 seconds)


.. _sphx_glr_download_examples_energy_force.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: energy_force.py <energy_force.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: energy_force.ipynb <energy_force.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
