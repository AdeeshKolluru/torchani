.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_ase_interface.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_ase_interface.py:


Structure minimization and constant temperature MD using ASE interface
======================================================================

This example is modified from the official `home page` and
`Constant temperature MD`_ to use the ASE interface of TorchANI as energy
calculator.

.. _home page:
    https://wiki.fysik.dtu.dk/ase/
.. _Constant temperature MD:
    https://wiki.fysik.dtu.dk/ase/tutorials/md/md.html#constant-temperature-md


To begin with, let's first import the modules we will use:



.. code-block:: python

    from ase.lattice.cubic import Diamond
    from ase.md.langevin import Langevin
    from ase.optimize import BFGS
    from ase import units
    import torchani








Now let's set up a crystal



.. code-block:: python

    atoms = Diamond(symbol="C", pbc=True)
    print(len(atoms), "atoms in the cell")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    8 atoms in the cell


Now let's create a calculator from builtin models:



.. code-block:: python

    builtin = torchani.neurochem.Builtins()
    calculator = torchani.ase.Calculator(builtin.species, builtin.aev_computer,
                                         builtin.models, builtin.energy_shifter)
    atoms.set_calculator(calculator)







Now let's minimize the structure:



.. code-block:: python

    print("Begin minimizing...")
    opt = BFGS(atoms)
    opt.run(fmax=0.001)
    print()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Begin minimizing...
          Step     Time          Energy         fmax
    BFGS:    0 21:13:28    -8344.289062        0.0000


Now create a callback function that print interesting physical quantities:



.. code-block:: python

    def printenergy(a=atoms):
        """Function to print the potential, kinetic and total energy."""
        epot = a.get_potential_energy() / len(a)
        ekin = a.get_kinetic_energy() / len(a)
        print('Energy per atom: Epot = %.3feV  Ekin = %.3feV (T=%3.0fK)  '
              'Etot = %.3feV' % (epot, ekin, ekin / (1.5 * units.kB), epot + ekin))








We want to run MD with constant energy using the Langevin algorithm
with a time step of 1 fs, the temperature 300K and the friction
coefficient to 0.02 atomic units.



.. code-block:: python

    dyn = Langevin(atoms, 1 * units.fs, 300 * units.kB, 0.2)
    dyn.attach(printenergy, interval=50)







Now run the dynamics:



.. code-block:: python

    print("Beginning dynamics...")
    printenergy()
    dyn.run(500)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Beginning dynamics...
    Energy per atom: Epot = -1043.036eV  Ekin = 0.000eV (T=  0K)  Etot = -1043.036eV
    Energy per atom: Epot = -1043.006eV  Ekin = 0.026eV (T=203K)  Etot = -1042.980eV
    Energy per atom: Epot = -1043.013eV  Ekin = 0.030eV (T=230K)  Etot = -1042.983eV
    Energy per atom: Epot = -1043.008eV  Ekin = 0.054eV (T=415K)  Etot = -1042.954eV
    Energy per atom: Epot = -1042.976eV  Ekin = 0.061eV (T=473K)  Etot = -1042.914eV
    Energy per atom: Epot = -1042.980eV  Ekin = 0.039eV (T=305K)  Etot = -1042.941eV
    Energy per atom: Epot = -1043.012eV  Ekin = 0.029eV (T=226K)  Etot = -1042.983eV
    Energy per atom: Epot = -1043.017eV  Ekin = 0.037eV (T=286K)  Etot = -1042.980eV
    Energy per atom: Epot = -1043.015eV  Ekin = 0.030eV (T=234K)  Etot = -1042.985eV
    Energy per atom: Epot = -1042.997eV  Ekin = 0.018eV (T=137K)  Etot = -1042.980eV
    Energy per atom: Epot = -1043.002eV  Ekin = 0.036eV (T=277K)  Etot = -1042.966eV


**Total running time of the script:** ( 2 minutes  17.146 seconds)


.. _sphx_glr_download_examples_ase_interface.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: ase_interface.py <ase_interface.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: ase_interface.ipynb <ase_interface.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
